# .github/workflows/deploy.yaml
name: Deploy Tempo Key Server
on:
  push:
    branches: [ master, production ]

env:                          # ── static values
  GCR_HOST:        us.gcr.io
  GCP_PROJECT_ID:  babbage-private
  IMAGE_NAME:      tempo-key-server

jobs:
  build-and-deploy:
    name: Build-&-Deploy Tempo Key Server to Cloud Run
    runs-on: ubuntu-latest

    permissions:              # required by google-github-actions/auth
      contents: read
      id-token: write

    env:                      # ── values that depend on the branch
      CURRENT_BRANCH: ${{ github.ref_name == 'production' && 'production' || 'master' }}

    steps:
    # ──────── 1. Sources & toolchain ───────────────────────────────────────
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 22

    - name: Install dependencies
      run: npm ci

    # ──────── 2. Authenticate for docker push ─────────────────────────────
    - name: Auth (push to Container Registry)
      id: auth-push
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.DOCKER_REGISTRY_PUSH_KEY }}

    # ──────── 3. Build & push image ───────────────────────────────────────
    - name: Build and push Docker image
      id: build
      env:
        IMAGE_TAGS: |
          latest
          ${{ env.CURRENT_BRANCH }}-${{ github.sha }}
      run: |
        set -e
        cd key-server
        for TAG in $IMAGE_TAGS; do
          IMAGE_URI=${{ env.GCR_HOST }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${TAG}
          echo "Building $IMAGE_URI"
          docker build -t "$IMAGE_URI" .
          docker push  "$IMAGE_URI"
        done
        # expose the per-commit tag for later steps
        echo "IMAGE_URI=${{ env.GCR_HOST }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ env.CURRENT_BRANCH }}-${{ github.sha }}" >> "$GITHUB_OUTPUT"

    # ──────── 4. Generate service YAML ──────────────────────────────────
    - name: Create service description file
      run: |
        cat > service.${{ env.CURRENT_BRANCH }}.yaml << EOF
        apiVersion: serving.knative.dev/v1
        kind: Service
        metadata:
          name: ${{ env.CURRENT_BRANCH == 'production' && 'prod-tempo-key-server' || 'staging-tempo-key-server' }}
          annotations:
            run.googleapis.com/ingress: all
        spec:
          template:
            metadata:
              annotations:
                run.googleapis.com/execution-environment: gen2
                run.googleapis.com/cpu-throttling: "false"
            spec:
              containerConcurrency: 1000
              timeoutSeconds: 300
              containers:
              - image: ${{ steps.build.outputs.IMAGE_URI }}
                ports:
                - containerPort: 8081
                env:
                - name: HTTP_PORT
                  value: "8081"
                - name: SERVER_PRIVATE_KEY
                  value: "${{ env.CURRENT_BRANCH == 'production' && secrets.PROD_SERVER_PRIVATE_KEY || secrets.STAGING_SERVER_PRIVATE_KEY }}"
                - name: WALLET_STORAGE_URL
                  value: "${{ env.CURRENT_BRANCH == 'production' && secrets.PROD_WALLET_STORAGE_URL || secrets.STAGING_WALLET_STORAGE_URL }}"
                - name: BSV_NETWORK
                  value: "${{ env.CURRENT_BRANCH == 'production' && 'mainnet' || 'testnet' }}"
                - name: MONGO_URI
                  value: "${{ env.CURRENT_BRANCH == 'production' && secrets.PROD_MONGO_URI || secrets.STAGING_MONGO_URI }}"
                - name: MONGO_DB_NAME
                  value: "${{ env.CURRENT_BRANCH == 'production' && secrets.PROD_MONGO_DB_NAME || secrets.STAGING_MONGO_DB_NAME }}"
                - name: KEY_COLLECTION_NAME
                  value: "${{ env.CURRENT_BRANCH == 'production' && secrets.PROD_KEY_COLLECTION_NAME || secrets.STAGING_KEY_COLLECTION_NAME }}"
                - name: BALANCE_COLLECTION_NAME
                  value: "${{ env.CURRENT_BRANCH == 'production' && secrets.PROD_BALANCE_COLLECTION_NAME || secrets.STAGING_BALANCE_COLLECTION_NAME }}"
                resources:
                  limits:
                    cpu: 2000m
                    memory: 2Gi
                  requests:
                    cpu: 1000m
                    memory: 512Mi
        EOF

    # ──────── 5. Authenticate for deployment ──────────────────────────────
    - name: Auth (deploy to Cloud Run)
      id: auth-deploy
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_DEPLOY_CREDS }}

    # ──────── 6. Deploy to Cloud Run ───────────────────────────────────────
    - name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        metadata: service.${{ env.CURRENT_BRANCH }}.yaml
        region:   us-west1

    # ──────── 7. Post-deploy tweaks ───────────────────────────────────────
    - name: Set min instances & enable CPU boost
      run: |
        SERVICE_NAME=$( [ "${{ env.CURRENT_BRANCH }}" = "production" ] && echo "prod-tempo-key-server" || echo "staging-tempo-key-server" )
        gcloud run services update "${SERVICE_NAME}" \
          --region=us-west1 \
          --min-instances=1 \
          --cpu-boost
